// Code generated by nextgo; DO NOT EDIT.

package {{.PackageName}}

import (
{{range $p:=.Imports}} {{if ne $p.Path ""}} {{$p.Alias}} "{{$p.Path}}" {{end}}
{{end}}
)

{{ $alicePkg := .AliceChainPackage.Alias }}

type application struct {
    {{range $p:=.Middlewares}} {{$p}}Middleware      {{$alicePkg}}.Constructor
    {{end}}
	optFunc             []{{.RouteInfoPackage.Alias}}.OptionFunc
}

type OptionFunc func(app *application)

func WithMiddlewares({{range $index, $p := .Middlewares}}{{if $index}}, {{end}}{{$p}}{{end}} func({{.GoHttpPackage.Alias}}.Handler) {{.GoHttpPackage.Alias}}.Handler) func(app *application) {
	return func(app *application) {
		{{range $p := .Middlewares}}app.{{$p}}Middleware = {{$p}}
		{{end}}
	}
}

func WithOption(opts ...{{.RouteInfoPackage.Alias}}.OptionFunc) func(m *application) {
	return func(app *application) { app.optFunc = opts }
}

func Handle(svr {{.RouteInfoPackage.Alias}}.Server, opts ...OptionFunc) {

	app := application{}
	for _, f := range opts {
		f(&app)
	}
	opt := {{.RouteInfoPackage.Alias}}.NewDefaultOption(app.optFunc...)
    {{range $a := .Apis}}
	svr.HandleFunc("{{$a.Method}}", "{{$a.Patten}}", {{$a.HandleFuncPackage}}.{{$a.HandleFunc}}HandleFunc( {{$alicePkg}}.New({{range $index, $m := $a.Middlewares}}{{if $index}},{{end}}app.{{$m}}Middleware{{end}}), opt).ServeHTTP)
    {{end}}
}
